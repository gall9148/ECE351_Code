#########################################################
#                                                       #
# Clifford Galli                                        #
# ECE351-51                                             #
# Lab #  2                                              #
# 02/04/20                                              #
#                                                       #
#########################################################
import numpy as np
import matplotlib.pyplot as plt
import scipy.signal as sig
import control as con
import pandas as pd
import sys
#%% Section 1
plt.rcParams.update({'font.size' :14})

steps = 1e-2
#t=np.arange(0, 5 +  steps, steps )

print('Number of elements: len(t) = ', len(t), '\nFirst Element: t[0] = ', t[0],
      ' \nLast Element : t[len(t) - 1] = ',t[len(t)-1])

#def example1(t):
   # y = np.zeros(t.shape)
    
    #for i in range(len(t)):
     #   if i < (len(t) + 1)/3:
      #      y[i] = t[i]**2
       # else:
        #    y[i] = np.sin(5*t[i]) +2
    #return y
#y = example1(t)
#def func1(t):
 #   y= np.cos(t)
  #  return y
#t=np.arange(0, 10 + steps, steps )
#y = func1(t)
 
#plt.figure(figsize=(10, 7))
#plt.subplot(2, 1, 1)
#plt.plot(t, y)
#plt.grid()
#plt.ylabel('y')
#plt.xlabel('t')
#plt.title('func1')
#plt.ylabel('y(t) with Good Resolution')
#plt.title('Background - Illustration of for Loops and if/else Statements')
#t = np.arange(0, 5 + 0.25, 0.25)
#y=example1(t)
#plt.subplot(2, 1, 2)
#plt.plot(t, y)
#plt.grid()
#plt.ylabel('t(t) with Poor Resolution')
#plt.xlabel('t')
#plt.show()   

#%% Section 2
def r(t):
    y=np.zeros((len(t),1))
    for i in range(len(t)):
        if t[i] >= 0:
            y[i] = t[i]
        else:
            y[i]=0
    return y
t=np.arange(-1, 1 + steps, steps )
y=r(t)

plt.figure(figsize=(10, 7))
plt.plot(t, y)
plt.grid()
plt.ylabel('y')
plt.xlabel('t')
plt.title('plot ')
#%% section 3
def u(t):
    y=np.zeros((len(t),1))
    for i in range(len(t)):
        if t[i] >= 0:
            y[i] = 1
        else: 
            y[i] = 0
    return y
t=np.arange(-1,1 + steps, steps )
y=u(t)

plt.figure(figsize=(10, 7))
plt.plot(t, y)
plt.grid()
plt.ylabel('y')
plt.xlabel('t')
plt.title('plot ')  

#%% Section 3
def func2(t):
    y = r(t) - r(t-3) + 5*u(t-3) - 2*u(t-6)-2*r(t-6)
    return y  
t=np.arange(-5,10 + steps, steps )
y=func2(t)

plt.figure(figsize=(10, 7))
plt.plot(t, y)
plt.grid()
plt.ylabel('y')
plt.xlabel('t')
plt.title('plot ')    


y=func2(-t)

plt.figure(figsize=(10, 7))
plt.plot(t, y)
plt.grid()
plt.ylabel('y')
plt.xlabel('t')
plt.title('plot ')

y=func2(t-4)

plt.figure(figsize=(10, 7))
plt.plot(t, y)
plt.grid()
plt.ylabel('y')
plt.xlabel('t')
plt.title('plot ')

y=func2(-t-4)

plt.figure(figsize=(10, 7))
plt.plot(t, y)
plt.grid()
plt.ylabel('y')
plt.xlabel('t')
plt.title('plot ')

y=func2(t/2)

plt.figure(figsize=(10, 7))
plt.plot(t, y)
plt.grid()
plt.ylabel('y')
plt.xlabel('t')
plt.title('plot ')

y=func2(2*t)

plt.figure(figsize=(10, 7))
plt.plot(t, y)
plt.grid()
plt.ylabel('y')
plt.xlabel('t')
plt.title('plot ')
#%%Section 4
#%% section 3
#def d(t):
#    y=np.zeros((len(t),1))
#    for i in range(len(t)):
#        if t[i] > steps or t[i] >-steps :
#            y[i] = sys.maxsize-1
#        else: 
#            y[i] = 0
#    return y
#t=np.arange(-10,10 + steps, steps )
#y= u(t) + d(t-3) - u(t-3) - d(t-6) - 2*u(t-6)

# =============================================================================
# plt.figure(figsize=(10, 7))
# plt.plot(t, y)
# plt.ylabel('y')
# plt.xlabel('t')
# plt.title('diff hand')
# plt.grid()
# plt.ylim([-5,10])
# plt.show()
# =============================================================================

t= np.arange(-10,10+steps,steps)
y=func2(t)
dt=np.diff(t)
dy=np.diff(y, axis=0)/dt

plt.figure(figsize=(10, 7))
plt.plot(t, y, '--',label='y(t)')
plt.plot(t[range(len(dy))], dy, label='dy(t)/dt')
plt.title('Derivative WRT time')
#plt.legend()
plt.grid()
plt.ylim([-2,10])
plt.show()
